<h1>About</h1>
<p>倉儲: <a href="https://github.com/mdecycu/wcm2025">https://github.com/mdecycu/wcm2025</a></p>
<p>網頁: <a href="https://mde.tw/wcm2025">https://mde.tw/wcm2025</a></p>
<p>Discussions: <a href="https://github.com/mdecycu/wcm2025/discussions">https://github.com/mdecycu/wcm2025/discussions</a></p>
<p>課程目標:</p>
<p style="padding-left: 30px;">讓學員了解網際內容管理系統架構與應用</p>
<p>教學要點:</p>
<p style="padding-left: 30px;">Python 程式設計、網際內容管理系統開發與應用</p>
<p>授課內容:</p>
<p style="padding-left: 30px;">網際內容管理概要</p>
<p style="padding-left: 30px;">探討 <a href="https://github.com/mdecycu/reeborg">Reeborg</a> 程式系統</p>
<p style="padding-left: 30px;">探討 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 架構</p>
<p style="padding-left: 30px;">分組專案</p>
<p style="padding-left: 30px;">分組報告</p>
<p>可攜程式系統:</p>
<p style="padding-left: 30px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 30px;"><span>備註: </span><span>請更新上列 portable_wcm2025.7z 中的 wscite 為 5.5.5 版 (</span><a href="http://229.cycu.org/wscite_5.5.5.7z">wscite_5.5.5.7z</a><span>, 解開壓縮檔案後取代 5.5.4 版的 wscite 目錄)</span></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>87b7bbx</span></p>
<p><span>學員作業網站樣板: <a href="https://mde.tw/wcm2025_hw">https://mde.tw/wcm2025_hw</a> </span></p>
<p>學員作業範例: <a href="https://mdewcm2025.github.io/hw-scrum-1">https://mdewcm2025.github.io/hw-scrum-1</a></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容.</p>
<p style="padding-left: 60px;">作業一 (20%): 採用 <a href="https://nginx.org/">nginx</a> 建立全球資訊網伺服器</p>
<p style="padding-left: 90px;">在 Windows 操作系統中建立一台 WWW 伺服器</p>
<p style="padding-left: 90px;">在 Ubuntu 操作系統建立一台 WWW 伺服器</p>
<p style="padding-left: 90px;">在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu)</p>
<p style="padding-left: 120px;">Virtualbox</p>
<p style="padding-left: 120px;">Vmware <a href="https://blogs.vmware.com/cloud-foundation/2024/11/11/vmware-fusion-and-workstation-are-now-free-for-all-users/">最近宣布</a>適用於 Windows 及 Linux 的 Vmware Workstation Pro (<a href="https://docs.vmware.com/en/VMware-Workstation-Pro/17.6/rn/vmware-workstation-176-pro-release-notes/index.html">17.6</a>), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費.</p>
<p style="padding-left: 120px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Workstation+Pro">下載 Vmware Workstation Pro</a> (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe</p>
<p style="padding-left: 120px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Fusion">下載 Vmware Fusion Pro</a> (For Mac) - 註冊帳號後下載</p>
<p style="padding-left: 60px;">作業二 (20%): 在各種不同環境下的操作系統中配置 <span><a href="https://mde.tw/reeborg">https://mde.tw/reeborg</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</span></p>
<p style="padding-left: 30px;">2. 期中協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p style="padding-left: 60px;">專案題目: 利用 Copilot 解析 <span><a href="https://mde.tw/reeborg">https://mde.tw/reeborg</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</span></p>
<p style="padding-left: 30px;">3. 期末協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p style="padding-left: 60px;"><span>專案題目: 網際內容管理架構下的 <a href="https://mde.tw/reeborg">https://mde.tw/reeborg</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)<br/></span></p>
<p style="padding-left: 90px;">利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯</p>
<p style="padding-left: 90px;">設法將 <span><a href="https://mde.tw/reeborg">https://mde.tw/reeborg</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</span> 與 cmsimde 網際內容管理系統整合</p>
<hr/>
<p>行事曆</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei"> 全頁檢視 </a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h2>list</h2>
<p><a href="https://mde.tw/wcm2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/f19c5033f3f82c47351ae50bac01904dd35140de/list_1a.py">列出 wcm2025 學員的作業網站與倉儲</a></p>
<h2>Git</h2>
<p>Git (<a href="https://github.com/git/git">原始碼</a>) 是一套<span style="background-color: #ffff00;">分散式版次管理系統</span>工具.</p>
<p>Github 則是利用 Git 建立的一套基於全球資訊網的<span style="background-color: #ffff00;">分散式版次管理系統</span>.</p>
<p>為什麼要使用<span style="background-color: #ffff00;">分散式版次管理系統</span>來管理數位檔案?</p>
<p>如何使用<span style="background-color: #ffff00;">分散式版次管理系統</span>管理數位檔案?</p><h3>W1</h3>
<h4><span style="background-color: #ffff00;">git 指令與 github 倉儲練習:</span></h4>
<p>以下練習將利用電腦輔助設計室中 C: 既有的可攜程式環境, 在近端建立一個 git 倉儲, 然後與 Github 上空白的倉儲進行對應. 完成後使用者可在多個地點將 Github 上的倉儲以 git clone 取下進行改版. 當近端某一舊倉儲版本落後 Github 上倉儲版本時, 則可利用 git pull 取下遠端新增的版本資料後繼續改版. 完成後再新增提交推送至 Github 倉儲.</p>
<p>練習步驟:</p>
<p>點選 C:\ 中舊版的可攜程式中的 start_ipv6.bat</p>
<p>啟動之後, 在其中一個命令列式視窗中執行下列指令:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Y:\&gt;cd tmp
Y:\tmp&gt;mkdir w1
Y:\tmp&gt;cd w1
Y:\tmp\w1&gt;git init</pre>
<p>上列指令第一行是利用 cd 更換目錄指令, 將工作目錄從 Y 槽的根目錄更換到 tmp 目錄, cd 是 change directory 的意思</p>
<p>第二行則利用 mkdir 建立 w1 目錄, mkdir 是 make directory 的意思</p>
<p>第三行再利用 cd 將目錄更換到 w1</p>
<p>第四行則在 w1 目錄中執行 git init 指令, 表示已經可以在可攜程式搜尋路徑中執行 portablegit 中的 git.exe, 並要求執行 init, 也就是 initialize 的意思, 將此目錄起始作為 git 倉儲, 執行 git init 之後, git 會在 w1 目錄中建立一個 .git 目錄, 其中帶有 git 所需的設定檔案, 與存放版本資料的資料架構.</p>
<p>將 w1 目錄設定為 git 倉儲目錄之後, 就可以在 w1 目錄中儲存檔案, 每次改版或重要改版階段完成之後, 可以再利用 git 指令對改版內容進行: 新增 - 提交 - 推送等流程, 版本新增指令為 git add, 提交為 git commit, 而推送則為 git push</p>
<p>git add 指令會將改版的資料放入暫存區, 準備進行提交, 而提交過程需要綁定修改者的資訊, 最後推送則需要推送者連通至遠端系統間的認證資訊. 實際操作指令如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git add .
git commit -m "提交訊息"
git push</pre>
<p>但由於截至目前, 還沒有註記使用者的帳號與電子郵箱, 也還沒有設定推送的目的地, 因此先在可攜系統中設定使用者帳號:</p>
<p>git config --global user.name "your github account"</p>
<p>接著設定電子郵箱:</p>
<p>git config --global user.email "your email"</p>
<p>上面所執行的 git config 因為額外加入 --global, 因此會將設定內容存入可攜系統的 home_ipv6 目錄中, 設定檔案的名稱為 .gitconfig</p>
<p>接下來, 為了要將近端 git 倉儲推向 github.com, 必須先登入 github.com, 然後建立一個完全空白的倉儲, 之後再執行下列指令:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git branch -M main
git remote add origin git@session_name:github_account/w1.git
git push -u origin main</pre>
<p>上列指令的第一行必須在 w1 目錄中執行, 表示要將主分支的名稱設為 main.</p>
<p>第二行則針對此倉儲建立一個遠端對應名稱 origin, 其遠端網址為隨後的網址, 若此時要使用 SSH 連線, 且已經設定好電腦登錄資料庫中的 session_name, 且登入 github.com 的帳號名稱為 github_account, 則此遠端倉儲的網址設定為: <a href="mailto:git@session_name:github_account/w2.git">git@session_name:github_account/w2.git</a></p>
<p>意思是: 採 SSH 認證時, 必須採 git 作為遠端登入 github.com 的共同帳號, 然後根據隨後的 session_name 找到對應的連線網址 (此時是 github.com), SSH 協定近端的 key 位置, 以及是否需要使用 proxy 設定等資訊.</p>
<p></p>
<p>執行 git remote add 指令後, 此一資訊會寫入 w1 倉儲中 .git 目錄中的 config 檔案中. 此一指令寫入的資料如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[remote "origin"]
    url = git@session_name:github_account/w1.git
    fetch = +refs/heads/*:refs/remotes/origin/*</pre>
<p>上列指令的最後一行則是用 origin 代表遠端倉儲的網址, 然後將此網址的 main 分支設為之後 git push 指令的內定分支, 也就使用了 git push 指令中的 -u 設定, 此 u 代表 upstream, 也就是設定完成後, git 會將此設定寫入倉儲 .git/config  檔案中, 將 remote origin 中的 main 分支作為本地分支的上游.</p>
<p>換句話說, 執行 git push -u origin main 指令時, Git 會在 w1 倉儲中的 .git/config 檔案中寫入追蹤分支的相關資訊. 也就是會在 .git/config 檔案中的 [branch "main"] 區塊加入 remote 和 merge 設定, 讓近端 w1 倉儲的 main 分支與遠端倉儲 origin 上的 main 分支進行串接. .git/config 檔案中寫入的內容如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[branch "main"]
    remote = origin
    merge = refs/heads/main</pre>
<p><br/><span style="background-color: #ffff00;">SSH 使用設定:</span></p>
<p>在 Windows 操作系統中可以採用 Putty 設定 SSH 協定認證過程中, 登錄至 Github key server 中所需的 OpenSSH 格式鑰匙 (此鑰匙稱為 public key, 也可以將其視為進入 github.com 門上的鎖頭, 因為大家從外面就可以看得到), 另外 Putty 建立 public key 同時, 在近端可以儲存與公鑰認證對應的 private key, 也就是私鑰, 而此私鑰的格式則是 Putty 特有的檔案格式, 因此存為 .ppk, 也就是 putty private key 的意思.</p>
<p>通常在帶有還原卡的電腦上工作, 此把私鑰會存在隨身碟中, 並在啟動可攜程式環境之後, 將私鑰相關設定的 session 透過 .reg 檔案存回 Windows 操作系統的登錄檔案中. 而這個 Putty session 的設定登錄檔案將會被存入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 中. 因此設定完成後必須將此登錄檔匯出, 並在下一次啟動可攜程式環境時匯入. 若不是在帶有還原卡的電腦上進行設定, 則只需要設定一次便可使用.</p>
<h2>Summary</h2>
<p><object data="/images/wcm2025.svg" height="1523" type="image/svg+xml" width="1488"></object></p>
<p><a href="https://mdecycu.github.io/mind-map/#/?fileURL=https://mde.tw/wcm2025/downloads/wcm2025.smm">Edit wcm2025.smm</a></p>
<h2>WCMS</h2>
<p>Intro to WCMS:</p>
<p><a href="https://en.wikipedia.org/wiki/Web_content_management_system">Web content management system</a></p>
<p><a href="https://www.techtarget.com/searchcontentmanagement/definition/web-content-management-WCM">WCM</a></p>
<p><a href="https://www.ilo.org/sites/default/files/wcmsp5/groups/public/@dgreports/@dcomm/@webdev/documents/instructionalmaterial/wcms_767815.pdf">wcms.pdf</a></p>
<h2>WebApp</h2>
<p>網際應用程式 - <a href="https://en.wikipedia.org/wiki/Web_application">Web Application</a></p>
<p style="padding-left: 30px;">A web application (or web app) is application software that is created with web technologies and runs via a web browser. Web applications emerged during the late 1990s and allowed for the server to dynamically build a response to the request, in contrast to static web pages.</p>
<p>Build Full-Stack Web Apps Using Only Python</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Solution_stack#Full-stack_developer">https://en.wikipedia.org/wiki/Solution_stack#Full-stack_developer</a> </p>
<p><a href="https://com-pute.com/brython_tutorial/">https://com-pute.com/brython_tutorial/</a> </p>
<p style="padding-left: 30px;">Create production web applications using a browser-based version of Python<br/>called 'Brython', as well as the Python Flask and SQLAlchemy libraries.</p>
<p style="padding-left: 30px;"><a href="https://pythonanvil.com/">https://pythonanvil.com/</a> </p>
<p style="padding-left: 30px;"><a href="https://streamlitpython.com/">https://streamlitpython.com/</a> </p>
<p style="padding-left: 30px;"><a href="https://learnsqlpage.com/">https://learnsqlpage.com/</a> </p>
<h2>Vmware</h2>
<p>Vmware <a href="https://blogs.vmware.com/cloud-foundation/2024/11/11/vmware-fusion-and-workstation-are-now-free-for-all-users/">最近宣布</a>適用於 Windows 及 Linux 的 Vmware Workstation Pro (<a href="https://docs.vmware.com/en/VMware-Workstation-Pro/17.6/rn/vmware-workstation-176-pro-release-notes/index.html">17.6</a>), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費.</p>
<p><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Workstation+Pro">下載 Vmware Workstation Pro</a> (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.3.exe</p>
<p><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Fusion">下載 Vmware Fusion Pro</a> (For Mac) - 註冊帳號後下載</p><h2>AI</h2>
<p>如何因應 AI 時代的挑戰：</p>
<p>培養難以被AI取代的核心能力：</p>
<ol>
<li><span style="background-color: #ffff99;">創意思考與問題解決能力</span></li>
<li>跨領域整合的思維</li>
<li>同理心與情感智商</li>
<li>團隊合作與領導才能</li>
<li>批判性思考與決策能力</li>
</ol>
<p>選擇未來導向的專業領域：</p>
<ol>
<li>AI 與機器學習相關技術</li>
<li>數據分析與應用</li>
<li>人機互動設計</li>
<li><span style="background-color: #ffff99;">數位內容創作</span></li>
<li>永續發展與環保科技</li>
<li>心理諮商與生命教育</li>
<li>創意產業與體驗設計</li>
</ol>
<p>建立終身學習習慣：</p>
<ol>
<li><span style="background-color: #ffff99;">持續關注產業發展趨勢</span></li>
<li>善用線上學習平台</li>
<li><span style="background-color: #ffff99;">培養自主學習能力</span></li>
<li>建立知識更新機制</li>
<li>參與專業社群交流</li>
</ol>
<p>發展多元技能組合：</p>
<ol>
<li>不要侷限在單一專業</li>
<li>培養第二專長</li>
<li><span style="background-color: #ffff99;">跨領域知識整合</span></li>
<li>軟實力與硬實力並重</li>
<li>培養數位工具運用能力</li>
</ol>
<p>保持開放與彈性思維：</p>
<ol>
<li>擁抱新技術與改變</li>
<li>適應力與抗壓性</li>
<li><span style="background-color: #ffff99;">勇於嘗試新事物</span></li>
<li>正向面對挑戰</li>
<li>培養創業家精神</li>
</ol>
<hr/>
<p></p>
<h1>Topics</h1>
<h4>Tasks</h4>
<p>Task1: <span style="background-color: #ffff00;">自行製作可攜程式系統</span></p>
<p style="padding-left: 30px;">目的: 利用網際環境進行協同的成員, 在任一台 Windows 64 位元電腦上都擁有相同版本的網際內容管理工具.</p>
<p>Task2: <span style="background-color: #ffff00;">使用 SSH 協定執行作業倉儲的推送</span></p>
<p style="padding-left: 30px;">目的: 當多位組員在同一台電腦上執行 <a href="https://en.wikipedia.org/wiki/Pair_programming">Pair Programming</a>, 可以透過 SSH 共用協同 session, 分別透過可攜程式套件各自提交推送分組專案中的各部內容.</p>
<p>Task2.5: 在網際內容管理協同專案進行中, <span style="background-color: #ffff00;">導入 Fossil SCM</span></p>
<p style="padding-left: 30px;">目的: 由於免付費的 Github.com 服務, 限制使用者可上傳到倉儲中的檔案大小, 若協同專案需要管理 20MB 以上的單一檔案, 且希望保有分散式版次管理特性, 並利用網際流程管理內容, 在團隊小於 20 人的情況下, 可以使用 Fossil SCM 自行建立網際內容管理伺服器.</p>
<p>Task3: <span style="background-color: #ffff00;">導入 IPv6, Virtualbox 與 nginx (<a href="https://github.com/mdecycu/mind-map" style="background-color: #ffff00;">mind-map</a>)</span></p>
<p style="padding-left: 30px;">目的: 可以<a href="https://mdewcm2025.github.io/hw-scrum-1/content/IPv6.html">配發</a>每位學員一個固定 IPv6 網址, 結合 Virtualbox 與 nginx, 建立 Windows 與 Ubuntu 環境中的網際內容管理伺服器.</p>
<p style="padding-left: 30px;">過程中可以利用 mind-map 呈現伺服器架構與設置內容</p>
<p>Task4: <span style="background-color: #ffff00;">導入 Reeborg 網際機器人程式環境</span></p>
<p style="padding-left: 30px;">目的: 利用 2D Reeborg 的網際機器人程式套件, 說明網際協同設計的發展, 可以透過 WWW 同步設計, 建立更多虛擬整合 (Cyber-Physical Integration) 應用.</p>
<hr/>
<p>Github Classeom hw and wcm project 設置: hw 為各學員作業倉儲, wcm 為各組協同倉儲.</p>
<p><img alt="" height="193" src="/images/wcm2025_hw_and_project.png" width="400"/></p>
<h4>Topic1: 可攜環境與 Github</h4>
<p>可攜環境可以讓參與協同的每一位成員<span style="background-color: #ffff00;">使用相同版本</span>的工具套件, 包括 Git, Python, Putty, VSCode, Sharex, wscite 以及 Wink.</p>
<p>Github 則用來儲存個別學員與協同分組的產品設計內容, 因為倉儲中帶有內容管理系統, 每一位學員在進行各項階段性設計工程時, 都可以<span style="background-color: #ffff00;">記錄詳細歷程</span>, 也能利用個人及分組網頁<span style="background-color: #ffff00;">展示內容</span>, 其目的除了讓其他學員可以了解各階段提交的進度外, 也能透過互助合作的模式解決所面臨的問題.</p>
<h4>Topic2: WWW 全球資訊網</h4>
<p>全球資訊網（World Wide Web，簡稱 WWW）透過網際網路提供文件與各種多媒體資源的存取. 這些文件和資源通過超文本連結（Hypertext Links）互相連接, 並使用超文本傳輸協定（HTTP）進行傳輸. 全球資訊網的出現和普及大舉改變了人類獲取資訊和進行交流的方式, 使得資訊可以在全球範圍內迅速且方便地傳播, 從而促進了知識共享、商業活動及社會進步. 其重要性分別為:</p>
<ol>
<li><strong>資訊獲取</strong>：全球資訊網為現代人提供了方便快捷的資訊獲取方式, 幾乎所有類型的資訊都可以在網上找到.</li>
<li><strong>交流與合作</strong>：全球資訊網促進了全球範圍內的交流與合作, 無論是個人或組織之間, 都可以通過網路進行溝通與協同合作.</li>
<li><strong>電子商務</strong>：全球資訊網是電子商務的基礎, 為企業和消費者提供了一個方便且有效率的交易平台.</li>
<li><strong>教育與學習</strong>：全球資訊網提供了豐富的教育資源與線上學習平台, 使教育得以更加普及和靈活.</li>
<li><strong>娛樂與媒體</strong>：網路為現代人提供了豐富的娛樂內容和媒體資源, 如影片、音樂、互動遊戲等.</li>
</ol>
<h4>Topic3: 作業 - Nginx 與 Reeborg</h4>
<p>Nginx 是一套高效、輕量的開源 HTTP 伺服器, 其事件驅動架構可高效處理大量的並發連接, 因此應用於許多高流量網站.<a aria-label="Permalink: Reeborg Robot Programming System" class="anchor" href="https://github.com/copilot/c/85a10d38-46a6-4907-8f0b-af3ee36ff68b#reeborg-robot-programming-system" id="user-content-reeborg-robot-programming-system"><span aria-hidden="true" class="octicon octicon-link"></span></a></p>
<p>Reeborg 則是一套教育工具, 旨在幫助初學者學習程式設計概念和邏輯思維. Reeborg 是一個虛擬的機器人, 學習者可以通過編寫程式來控制它的行動, 完成各種任務和挑戰. Reeborg 支援 Python 和 JavaScript 程式語言, 並提供互動式 Web 界面, 學習者可以直接在瀏覽器中編寫和執行程式.</p>
<p><a href="/downloads/https_server_py.7z">https_server_py.7z</a> (利用 Python 伺服同目錄的 index.html)</p>
<h4>Topic4: 期中專案 - Copilot 與 Reeborg</h4>
<p>Copilot 是由 GitHub 與 OpenAI 合作開發的人工智慧程式碼助手工具. 它利用機器學習技術, 從大量的開源程式碼及自然語言處理模型中學習, 可在開發者編寫程式時提供即時的建議和自動補全功能. Copilot 能夠理解上下文, 並根據開發者的程式風格及需求生成相關的程式片段, 進而提高開發效率, 減少重複性工作, 並幫助解決程式編寫過程中的各種挑戰. Copilot 支援多種程式語言和框架, 是現代軟體開發過程中功能強大的輔助工具.</p>
<h4>Topic5: 期末專案 - Reeborg 與 cmsimde</h4>
<p>cmsimde 網際內容管理系統是一套簡單的網站內容管理系統. 利用 Python 及 Flask 編寫的 cmsimde 其動態網站的內容存在 config/content.htm 檔案中, 編輯時利用 H1, H2 與 H3 標題進行分頁, 一般並不建議各頁面使用重複內容, 動態網站的資料轉為靜態網站內容時, 會透過分頁將各頁內容存在 content 目錄中. 若動態網站中有重複標題的頁面, 則在轉為靜態網站時, 系統會自動在各頁面標題冠上 -1、-2、-3 等尾數進行辨別.</p>
<p></p>
<p>HTML, CSS and Javascript</p>
<p><a href="https://dev.to/martyhimmel/series/156">ECMAScript 5 教學</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-1787-0">2015 Javascript Object Programming</a> (<a href="http://229.cycu.org/2015_JavaScript_Object_Programming.pdf">local download</a>)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-6494-1">2015 JavaScript Quick Syntax Reference</a> (<a href="http://229.cycu.org/2015_javascript_quick_syntax_reference.pdf">local download</a>)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-6392-0">2015 Pro Javascript Techniques</a> (<a href="http://229.cycu.org/2015_pro_javascript_techniques.pdf">local download</a>)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-2235-5">2016 Beyond JQuery</a> (<a href="http://229.cycu.org/2016_beyond_jquery.pdf">local download</a>)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-9250-1">2023 The Absolute Beginner's Guide to HTML and CSS</a> (<a href="http://229.cycu.org/2023_beginner_goude_css_html.pdf">local download</a>)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-9783-4">2023 Creating Responsive Websites Using HTML5 and CSS3</a> (<a href="http://229.cycu.org/2023_Creating_Responsive_Websites_HTML5_CSS3.pdf">local download</a>)</p><h2>Wink</h2>
<p>Github 與 Fossil SCM 結合應用範例:</p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="wcmw3_fossil1" height="630" muted="true" width="1008">
<source src="/downloads/wink/wcmw3_fossil1.mp4" type="video/mp4"/></video></div><h3>Fossil</h3>
<p>Fossil SCM 的應用</p>
<p><a href="https://fossil-scm.org/">https://fossil-scm.org/</a> </p>
<p>Github 與 Fossil SCM 結合應用範例:</p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="wcmw3_fossil1" height="630" muted="true" width="1008">
<source src="/downloads/wink/wcmw3_fossil1.mp4" type="video/mp4"/></video></div>
<p><object data="/images/fossil.svg" height="593" type="image/svg+xml" width="1285"></object></p>
<p><a href="https://mdecycu.github.io/mind-map/#/?fileURL=https://mde.tw/wcm2025/downloads/fossil.smm">Edit fossil.smm</a></p><h2>Topic1</h2>
<p>可攜環境與 Github</p>
<p><object data="/images/topic1.svg" height="885" type="image/svg+xml" width="1357"></object></p>
<p><a href="https://mde.tw/mind-map/#/?fileURL=https%3A%2F%2Fmde.tw%2Fwcm2025%2Fdownloads%2Ftopic1.smm">Edit topic1.smm</a></p><h3>Portable</h3>
<h4>自行製作可攜程式系統</h4>
<p>此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境.</p>
<p>以下為操作步驟:</p>
<ol>
<li>下載 <a href="http://229.cycu.org/portable_python311.7z">portable_python311.7z</a>, 展開後是一套尚未安裝 pip 的 Python 3.11 可攜程式環境.</li>
<li>雙點擊 portable_python311 目錄中的 start_ipv6.bat 啟動可攜系統, 在 SciTE 中開啟 Y:\<a href="/downloads/gen_python313.py">gen_python313.py</a>, 以下拉式功能表 Tools - Go 執行, 便可在 Y:\ 建立 Python313 目錄.</li>
<li>接著修改 start_ipv6.bat, 利用 Search - Replace, Find 欄位填上 Python311, Replace 欄位填上 Python313 後, 按下 Replace All, 便可將啟動檔中所有 Python311 設定改為 Python313, 另存修改後的檔案為 start_python313.bat.</li>
<li>接下來以 stop.bat 關閉 start_ipv6.bat 開啟的可攜系統, 改以心建立的 start_python313.bat 開啟可攜環境, 之後在命令列輸入 python, 確認目前的 Python 版本為 3.13.2 後, 利用 Ctrl + z 退出 Python 後, 利用 pip list 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具.</li>
<li>在命令列中, 以 python get-pip.py 安裝 pip 工具, 完成後, 以 pip list 確認 pip.exe 已經配置完成.</li>
<li>最後在命令列中, 以 pip install flask flask_cors bs4 lxml pelican markdown 安裝 cmsimde 網際內容管理系統啟動所需的 Python 模組後, 此可攜系統中的 Python 3.13.2 套件已經可以用來維護個人作業倉儲與分組倉儲.</li>
<li>之後利用新版的 <a href="https://www.scintilla.org/SciTEDownload.html">SciTE</a>, <a href="https://git-scm.com/downloads/win">Portablegit</a>, <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PUTTY</a>, <a href="https://github.com/ShareX/ShareX/releases">ShareX</a>, <a href="https://www.debugmode.com/wink.html">Wink</a>, <a href="https://solvespace.com/download.pl">Solvespace</a>, <a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/zoomit">Zoomit</a>, <a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/process-explorer#download">ProcessExplorer</a> 以及原有的 tmp 及 home_ipv6, 以新的 start_python313 啟動.</li>
</ol>
<p>以下為操作影片:</p>
<p></p><h3>SSH</h3>
<h4>使用 SSH 協定執行作業倉儲的推送</h4>
<p><a href="https://zh.wikipedia.org/zh-tw/Secure_Shell">SSH</a> 是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe).</p>
<p>使用 PuTTY 所建立的公私鑰進行 Github push 認證的步驟:</p>
<p>第一步:</p>
<p style="padding-left: 30px;">若希望在 Windows 環境透過 git 指令, 使用 PuTTY 設定的 session (一個代表連線伺服器主機、私鑰位置與是否使用代理主機等資訊的字串), 執行 push, 必須要在啟動可攜環境時, 設定 GIT_SSH 環境變數, 將此變數指向 PuTTY 套件中的 plink.exe 位置 (也就是 set GIT_SSH=%Disk%:\putty\plink.exe).</p>
<p>第二步:</p>
<p style="padding-left: 30px;">指定利用 PuTTY 的 SSH session 執行 git push 後, 必須在 Windows 操作系統中選擇一個字串, 作為 SSH 連線 session 名稱, 由於此設定必須指向 SSH 協定加密用的私鑰所在目錄位置, 因此設定 session 之前, 必須利用 puttygen.txt 建立一對公私鑰, 其中的公鑰為 OpenSSH 格式, 必須送到使用者 Github 帳號設定區 (Settings) 的 SSH and GPG keys 中.</p>
<p>第三步:</p>
<p style="padding-left: 30px;">利用 puttygen.exe 建立公私鑰的方法, 是在執行 puttygen.exe 之後, 以滑鼠按下 Generate 之後, 讓滑鼠在 puttgen.exe 視窗中 key 下方的空白區域隨意移動, puttygen.exe 會根據滑鼠移動的位置隨機建立 OpenSSH 格式的公鑰, 以及配對的 PuTTY 格式的 Private Key (副檔名為 .ppk)</p>
<p>第四步:</p>
<p style="padding-left: 30px;">接下來, 將 OpenSSH 格式的 Public Key 內容複製到個人 Github 帳號設定區的 SSH and GPG keys 中, 並以 puttygen.exe 執行視窗右下方的 Save private key 按鈕, 將私鑰 (假設為 myprivatekey.ppk) 存至 Y:\.</p>
<p>第五步:</p>
<p style="padding-left: 30px;">接著啟動 PuTTY 中的 putty.exe, 在 Host Name (or IP Address) 欄位填入 github.com, 並確認 Connection Type 選用 SSH, 表示要透過 SSH 加密協定連線到 github.com.</p>
<p>第六步:</p>
<p style="padding-left: 30px;">接著在 putty.exe 視窗下方的 Saved Sessions 填入一組字串, 此字串就是之後要遠端登入 github.com 設定 push 連線 URL 的 session 名稱, 在此假設選擇 "mysession" 作為 session 名稱, 使用者可以自行選擇具有代表性的字串, 例如: 學號或簡短的英文姓名縮寫.</p>
<p>第七步:</p>
<p style="padding-left: 30px;">在 putty.exe 視窗中填入 github.com 與 "mysession" 名稱之後, 點擊 Save 之後, 此 session 設定就會被 Windows 操作系統存入該台電腦的 Registry 登錄檔案中的 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 所在組態區. 此時可以在命令列中輸入 regedit 後進入登錄檔查看是否 mysession 已經存在.</p>
<p>第八步:</p>
<p style="padding-left: 30px;">上列 "mysession" 設定完成且按下 Save 之後, 若再按下 Open, 採用 IPv4 網路連線的電腦應該已經可以透過 putty.exe 遠端連線至 github.com, 視窗中會出現 github.com 作為視窗標題, 且內容為 login as: 但一般使用者並沒有帳號可以直接透過 putty.exe 遠端登入到 github.com, 而只能在 session 設定完成後, 利用此 session 執行 git push.</p>
<p>第九步:</p>
<p style="padding-left: 30px;">由於前面的 "mysession" 雖然已經存入 Windows 操作系統的登錄檔, 但並沒有設定 private key 的位置, 因此接下來要再開啟 putty.exe, load 進此一 session, 然後在此 session 設定左方的 Category: 下方的 Connection - SSH - Auth - Credentials 設定中的 Private key file for authentication: 區, 利用 Browse 選擇位於 Y:\ 的 myprivatekey.ppk 檔案. 選擇檔案完成後, 必須再回到 Catetory: 下方的 Session 區, 以右方的 Save 將附加私鑰位置設定的 session 存檔. 此時 Windows 登錄檔中的 "mysession" 除了代表要使用 SSH 連線到 github.com 之外, 還附帶指定了 myprivatekey.ppk 在 Y:\ 的位置.</p>
<p>第十步:</p>
<p style="padding-left: 30px;">若上述設定是在電腦輔助設計室中的電腦進行, 必須利用命令列 regedit 指令, 進入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 位置, 利用滑鼠右鍵將此登錄設定檔案"匯出" 存入可攜程式 start_ipv6.bat 所在目錄, 此處假設命名為 mysession.reg, 使用者可以自行對 .reg 命名.</p>
<p>第十一步:</p>
<p style="padding-left: 30px;">由於上列的 myprivatekey.ppk 存於可攜程式中的 Y:\, 因此當使用者利用 start_ipv6.bat 啟動可攜程式後, 就可以利用滑鼠雙點擊位於同目錄的 mysession.reg, 上述的 "mysession" 設定就會存入 Windows 操作系統的登錄檔中.</p>
<p>使用 PuTTY session 設定倉儲 .git/config 中的 URL</p>
<p>假設上列 "mysession" 對應中的 OpenSSH 格式公鑰是送到 Github 帳號為 scrum-1 學員的 SSH and GPG key 區域, 則 scrum-1 學員在啟動可攜系統後, 已經雙點擊 mysession.reg, 將前述 putty.exe 設定的 session 組態登錄設定回存至 Windows 操作系統中, 則 scrum-1 學員就可以將其近端作業倉儲中的 mysession 用於倉儲 .git/config 檔案的下方設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[remote "origin"]
    url = git@mysession:mdewcm2025/hw-scrum-1.git
    fetch = +refs/heads/:refs/remotes/origin/</pre>
<p>其中的 [remote "origin"] 表示當使用 git 指令中針對此倉儲 "origin" 是一個與遠端倉儲對應的字串代號, 代表其下兩項設定. url 代表此 "origin" 的倉儲連線網址, 而連線至此倉儲的協定是採遠端登入 (使用 Github 支援的 SSH 遠端登入協定), 且此遠端登入的帳號為 "git", 這是所有要使用 SSH 執行 git push 的用戶共同使用的登入帳號.</p>
<p>url 設定中 "@" 之後的 "mysession" 就是宣告要使用此電腦登錄檔中所設定的 session 名稱 (代表要連線到 github.com, 且帶的 myprivatekey.ppk, 準備在登入流程中與 github.com 中 mdewcm2025 帳號下的 hw-scrum-1 倉儲擁有者 (或帶有 repo 管理權限的帳號) 所登錄的 public keys 進行認證比對, 一旦通過認證, git push 指令就可以成功將改版資料推送到指定的倉儲區域.</p><h3>Javascript</h3>
<p><a href="https://dev.to/martyhimmel/javascript-es5---getting-started-5980">教材一</a></p>
<p>在任何一個網頁, 利用滑鼠右鍵帶出小視窗, 然後選擇"檢測", 再點選"主控台", 輸入"alert("Hello, Javascript") 後按下 Enter, 就會跳出一個小視窗列出 "Hello, Javascript". 這個意思是, 網頁瀏覽器中就自帶有 Javascript 的解譯器.</p>
<p>接下來, 假如你已經建立好了隨身碟中的可攜程式環境: <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a>, 同時也取得 wcm2025 課程所配置的學員作業倉儲, 你就可以直接在編輯動態網頁的同時, 開啟該頁面的 Source Code (也就是該頁面的 HTML 超文件內容), 並將下列 Javascript 程式放入超文件中, 存檔後點選編輯區下方的"viewpage"按鈕, 就可以從"主控台"看到程式執行結果:</p>
<p><span>備註: </span><span>請更新上列 portable_wcm2025.7z 中的 wscite 為 5.5.5 版 (</span><a href="http://229.cycu.org/wscite_5.5.5.7z">wscite_5.5.5.7z</a><span>, 解開壓縮檔案後取代 5.5.4 版的 wscite 目錄)</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script&gt;
console.log("顯示在主控台 - 紀錄區的內容")
&lt;/script&gt;</pre>
<p>假如編輯網頁中的 HTML 原始碼再加入下列程式段, 就可以在網頁中利用 &lt;script type="text/python"&gt;&lt;/script&gt;, 以 Python 語法建立程式, 而這種程式是經由採 Javascript 編寫的 <a href="https://brython.info/">Brython</a> 解譯器轉為 Javascript 後, 直接在網頁中執行:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;script type="text/python"&gt;
print("從 Brython 執行後看到的結果")
&lt;/script&gt;</pre>
<p>從上面這個範例, 可以看出較長的 Javascript 程式, 並不是直接寫在網頁上, 而是儲存在 WWW 伺服器中的特定位置後, 然後在網頁中導入執行, 例如這個範例中的 brython.js.</p>
<p>另外, 由於 cmsimde 網際內容管理系統程式設計的問題, 動態網頁與靜態網頁引用 Javascript 程式路徑的方式不同, 初學者必須特別注意. 下列程式就是利用 Brython 編寫的網頁版貪食蛇遊戲, 利用滑鼠按下"啟動"就可以執行, 按下"暫停"程式就會暫時停止執行.</p>
<div id="brython_div2"></div>
<script>
console.log("顯示在主控台 - 紀錄區的內容")
</script>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<script type="text/python">
print("從 Brython 執行後看到的結果")
</script>
</p>
<script src="https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py" type="text/python">
</script><h2>Topic2</h2>
<p>WWW 全球資訊網</p>
<p><object data="/images/topic2.svg" height="772" type="image/svg+xml" width="767"></object></p>
<p><a href="https://mde.tw/mind-map/#/?fileURL=https%3A%2F%2Fmde.tw%2Fwcm2025%2Fdownloads%2Ftopic2.smm">Edit topic2.smm</a></p>
<h3>IPv6</h3>
<p>根據 <a href="/downloads/1a_stud.txt">1a_stud.txt</a> 中的學員序號, 每位學員分配一個固定的 IPv6 網址:</p>
<p>學員序號為 1的固定 IPv6 分配: 2001:288:6004:17:fff1:cc25:0000:a001</p>
<p>IPv6 網路設定畫面如下:</p>
<p><img alt="" height="329" src="/images/wcm_index1_ipv6_setup.png" width="400"/></p><h2>Topic3</h2>
<p>Homework</p>
<p><object data="/images/topic3.svg" height="343" type="image/svg+xml" width="598"></object></p>
<p><a href="https://mde.tw/mind-map/#/?fileURL=https%3A%2F%2Fmde.tw%2Fwcm2025%2Fdownloads%2Ftopic3.smm">Edit topic3.smm</a></p>
<h3>VM</h3>
<p>Virtual Machine and WWW servers:</p>
<p>1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容.</p>
<p style="padding-left: 30px;">作業一 (20%): 採用 <a href="https://nginx.org/">nginx</a> 建立全球資訊網伺服器</p>
<p style="padding-left: 60px;">在 Windows 操作系統中建立一台 WWW 伺服器</p>
<p style="padding-left: 60px;">在 Ubuntu 操作系統建立一台 WWW 伺服器</p>
<p style="padding-left: 60px;">在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu)</p>
<p style="padding-left: 90px;">Virtualbox</p>
<p style="padding-left: 90px;">Vmware <a href="https://blogs.vmware.com/cloud-foundation/2024/11/11/vmware-fusion-and-workstation-are-now-free-for-all-users/">最近宣布</a>適用於 Windows 及 Linux 的 Vmware Workstation Pro (<a href="https://docs.vmware.com/en/VMware-Workstation-Pro/17.6/rn/vmware-workstation-176-pro-release-notes/index.html">17.6</a>), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費.</p>
<p style="padding-left: 90px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Workstation+Pro">下載 Vmware Workstation Pro</a> (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe</p>
<p style="padding-left: 90px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Fusion">下載 Vmware Fusion Pro</a> (For Mac) - 註冊帳號後下載</p>
<p style="padding-left: 30px;">作業二 (20%): 在各種不同環境下的操作系統中配置 <span><a href="https://mde.tw/reeborg">https://mde.tw/reeborg</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</span></p>
<h2>Topic4</h2>
<p>期中專案</p>
<p><object data="/images/topic4.svg" height="108" type="image/svg+xml" width="690"></object></p>
<p><a href="https://mde.tw/mind-map/#/?fileURL=https%3A%2F%2Fmde.tw%2Fwcm2025%2Fdownloads%2Ftopic4.smm">Edit topic4.smm</a></p>
<h3>Copilot</h3>
<p>2. 期中協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p>專案題目: 利用 Copilot 解析 <span><a href="https://mde.tw/reeborg">https://mde.tw/reeborg</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</span></p>
<h2>Topic5</h2>
<p>期末專案</p>
<p><object data="/images/topic5.svg" height="108" type="image/svg+xml" width="729"></object></p>
<p><a href="https://mde.tw/mind-map/#/?fileURL=https%3A%2F%2Fmde.tw%2Fwcm2025%2Fdownloads%2Ftopic5.smm">Edit topic5.smm</a></p>
<h3>cmsimde</h3>
<p>3. 期末協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p><span>專案題目: 網際內容管理架構下的 <a href="https://mde.tw/reeborg">https://mde.tw/reeborg</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)<br/></span></p>
<p style="padding-left: 30px;">利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯</p>
<p style="padding-left: 30px;">設法將 <span><a href="https://mde.tw/reeborg">https://mde.tw/reeborg</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</span> 與 cmsimde 網際內容管理系統整合</p>
<h1>Reeborg</h1>
<h4>建立開發用的 Reeborg 倉儲:</h4>
<p>因為 <a href="https://github.com/aroberge/reeborg">https://github.com/aroberge/reeborg</a> 原始碼的使用授權允許延伸應用, 因此進行如下處理:</p>
<ol>
<li>在 Github 建立一個空的倉儲, 名稱設為 reeborg.</li>
<li>git clone --recurse-submodules <a href="https://github.com/aroberge/reeborg.git">https://github.com/aroberge/reeborg.git</a> rb, 表示暫時將可能帶有子模組 (其實並沒有) 的倉儲取下, 放入 rb 目錄中.</li>
<li>cd rb 後, 執行 git remote add rb <a href="mailto:git@your_putty_session:your_github_account/reeborg.git">git@your_putty_session:your_github_account/reeborg.git</a></li>
<li>然後利用 git push rb, 將帶有所有提交歷程記錄的倉儲送到原本為空的 reeborg.</li>
<li>此一 Reeborg 原始碼的倉儲就位於 <a href="https://github.com/mdecycu/reeborg">https://github.com/mdecycu/reeborg</a></li>
<li>取下新建立的 reeborg 開發倉儲後, 將 reeborg.js 放入 rb 目錄, 並取原先的 reeborg_offline.html 作為 index.html, 放入 acp 與 acp.bat 後將內建 branch 改為 main, 提交變更後再設定 Github Pages, 完成 <a href="https://mde.tw/reeborg">https://mde.tw/reeborg</a> 的開發設定.</li>
<li>除了目前多語言版本外, 也可以<a href="https://github.com/mdecycu/reeborg/tree/e5742fbbfb915cecb9c078bc45f44d722d6a118d">回到 2016.02.03 的穩定版本</a>.</li>
</ol>
<h4>利用 Python 內建伺服器執行 Reeborg:</h4>
<ol>
<li>啟動可攜程式環境</li>
<li>cd tmp</li>
<li>git clone <a href="https://github.com/mdecycu/reeborg.git">https://github.com/mdecycu/reeborg.git</a></li>
<li>cd reeborg</li>
<li>python -m http.server</li>
<li>然後使用瀏覽器連結至 <a href="http://localhost:8000/world.html">http://localhost:8000/world.html</a></li>
</ol>
<p>Reeborg 原始碼所使用的 Javascript 語法請參考下列參考資料:</p>
<p style="padding-left: 30px;"><a href="https://dev.to/martyhimmel/series/156">ECMAScript 5 教學</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-1787-0">2015 Javascript Object Programming</a> (<a href="http://229.cycu.org/2015_JavaScript_Object_Programming.pdf">local download</a>)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-6494-1">2015 JavaScript Quick Syntax Reference</a> (<a href="http://229.cycu.org/2015_javascript_quick_syntax_reference.pdf">local download</a>)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-6392-0">2015 Pro Javascript Techniques</a> (<a href="http://229.cycu.org/2015_pro_javascript_techniques.pdf">local download</a>)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-2235-5">2016 Beyond JQuery</a> (<a href="http://229.cycu.org/2016_beyond_jquery.pdf">local download</a>)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-9250-1">2023 The Absolute Beginner's Guide to HTML and CSS</a> (<a href="http://229.cycu.org/2023_beginner_goude_css_html.pdf">local download</a>)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-9783-4">2023 Creating Responsive Websites Using HTML5 and CSS3</a> (<a href="http://229.cycu.org/2023_Creating_Responsive_Websites_HTML5_CSS3.pdf">local download</a>)</p>
<h2>walk</h2>
<p><a href="https://s104.cycu.org/reeborg">https://s104.cycu.org/reeborg</a> 在 Other worlds 下方點選 Alone 後, 按下 run 執行下列程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">for i in range(4):
    for j in range(9):
        move()
    turn_left()</pre>
<p><img alt="" height="400" src="/images/reeborg_walk_alone.gif" width="400"/></p>
<h1>Reference</h1>
<p><a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> 利用 Template 建立多樣的靜態網站內容</p>
<p><a href="https://github.com/mdecycu/reeborg">https://github.com/mdecycu/reeborg</a> 原始碼研究, 升級其 Brython 版本以及相關 Javascript 程式庫</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/reeborg/">https://mde.tw/reeborg/</a></p>
<p>整理舊資料: <a href="https://github.com/coursemdetw">https://github.com/coursemdetw</a></p>
<p><a href="https://coursemdetw.github.io/creo2primer">https://coursemdetw.github.io/creo2primer</a> learn how to write a CAD tutorial book</p>
<h2>Old</h2>
<p>以下連結僅能在系統主幹網路的 IPv6 協定下擷取:</p>
<p style="padding-left: 30px;">有關<a href="http://wcm.cycu.org:88/github/wcm2019/content/%E4%BB%A3%E7%90%86%E4%B8%BB%E6%A9%9F%E8%A8%AD%E5%AE%9A.html">代理主機設定</a></p>
<p style="padding-left: 30px;">有關<a href="http://wcm.cycu.org:88/github/wcm2019/content/%E5%85%A8%E7%90%83%E5%8D%94%E5%90%8C.html">全球協同</a></p>
<p style="padding-left: 30px;">有關 <a href="http://wcm.cycu.org:88/github/wcm2019/content/%E5%AF%A6%E7%BF%92%E4%BB%BB%E5%8B%99%E4%B8%80.html">Blogger</a>, <a href="http://wcm.cycu.org:88/github/wcm2019/content/Blogger%20API.html">Blogger API</a>, <a href="http://wcm.cycu.org:88/github/wcm2019/content/Blogger%20API%20%E6%87%89%E7%94%A8.html">應用</a></p>
<p style="padding-left: 30px;">有關 <a href="http://wcm.cycu.org:88/github/wcm2019/content/ANSI%20C.html">ANSIＣ</a>, 有關 <a href="http://wcm.cycu.org:88/github/wcm2019/content/Lua.html">Lua</a> (CoppeliaSim 中使用 Lua 作為控制用 Script 語言)</p>
<p style="padding-left: 30px;">有關 <a href="http://wcm.cycu.org:88/github/wcm2019/content/Konva%20demo.html">Konva</a></p>
<p style="padding-left: 30px;"><a href="http://wcm.cycu.org:88/github/wcm2019/content/sitemap.html">其他</a> (<a href="http://wcm.cycu.org:88/github/wcm2019/content/sitemap.html">2019</a>, <a href="http://wcm.cycu.org:88/github/wcm2020/content/sitemap.html">2020</a>, <a href="http://wcm.cycu.org:88/github/wcm2021/content/sitemap.html">2021</a>, <a href="http://wcm.cycu.org:88/github/wcm2022_guide/content/sitemap.html">2022</a>, <a href="http://wcm.cycu.org:88/github/wcm2023/content/sitemap.html">2023</a>, <a href="http://wcm.cycu.org:88/github/wcm2024/content/sitemap.html">2024</a>)</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p></p>