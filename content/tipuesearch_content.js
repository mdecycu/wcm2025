var tipuesearch = {"pages": [{'title': 'About', 'text': '倉儲:  https://github.com/mdecycu/wcm2025 \n 網頁:  https://mde.tw/wcm2025 \n Discussions:  https://github.com/mdecycu/wcm2025/discussions \n 課程目標: \n 讓學員了解網際內容管理系統架構與應用 \n 教學要點: \n Python 程式設計、網際內容管理系統開發與應用 \n 授課內容: \n 網際內容管理概要 \n 探討  Reeborg  程式系統 \n 探討  cmsimde  架構 \n 分組專案 \n 分組報告 \n 可攜程式系統: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 87b7bbx \n 學員作業網站樣板:  https://mde.tw/wcm2025_hw   \n \n 課程評分: \n 1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容. \n 作業一 (20%): 採用  nginx  建立全球資訊網伺服器 \n 在 Windows 操作系統中建立一台 WWW 伺服器 \n 在 Ubuntu 操作系統建立一台 WWW 伺服器 \n 在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu) \n Virtualbox \n Vmware  最近宣布 適用於 Windows 及 Linux 的 Vmware Workstation Pro ( 17.6 ), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費. \n 下載 Vmware Workstation Pro  (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe \n 下載 Vmware Fusion Pro  (For Mac) - 註冊帳號後下載 \n 作業二 (20%): 在各種不同環境下的操作系統中配置  https://mde.tw/reeborg  ( 原始碼 ) \n 2. 期中協同專案執行、簡報與報告 (三人一組) (30%) \n 專案題目: 利用 Copilot 解析\xa0 https://mde.tw/reeborg  ( 原始碼 ) \n 3. 期末協同專案執行、簡報與報告\xa0(三人一組) (30%) \n 專案題目: 網際內容管理架構下的  https://mde.tw/reeborg  ( 原始碼 ) \n 利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯 \n 設法將\xa0 https://mde.tw/reeborg  ( 原始碼 )  與 cmsimde 網際內容管理系統整合 \n \n 行事曆 \n  全頁檢視  \n', 'tags': '', 'url': 'About.html'}, {'title': 'Git', 'text': 'Git ( 原始碼 ) 是一套 分散式版次管理系統 工具. \n Github 則是利用 Git 建立的一套基於全球資訊網的 分散式版次管理系統 . \n 為什麼要使用 分散式版次管理系統 來管理數位檔案? \n 如何使用 分散式版次管理系統 管理數位檔案? \n', 'tags': '', 'url': 'Git.html'}, {'title': 'W1', 'text': 'git 指令與 github 倉儲練習: \n 以下練習將利用電腦輔助設計室中 C: 既有的可攜程式環境, 在近端建立一個 git 倉儲, 然後與 Github 上空白的倉儲進行對應. 完成後使用者可在多個地點將 Github 上的倉儲以 git clone 取下進行改版. 當近端某一舊倉儲版本落後 Github 上倉儲版本時, 則可利用 git pull 取下遠端新增的版本資料後繼續改版. 完成後再新增提交推送至 Github 倉儲. \n 練習步驟: \n 點選 C:\\ 中舊版的可攜程式中的 start_ipv6.bat \n 啟動之後, 在其中一個命令列式視窗中執行下列指令: \n Y:\\>cd tmp\nY:\\tmp>mkdir w1\nY:\\tmp>cd w1\nY:\\tmp\\w1>git init \n 上列指令第一行是利用 cd 更換目錄指令, 將工作目錄從 Y 槽的根目錄更換到 tmp 目錄, cd 是 change directory 的意思 \n 第二行則利用 mkdir 建立 w1 目錄, mkdir 是 make directory 的意思 \n 第三行再利用 cd 將目錄更換到 w1 \n 第四行則在 w1 目錄中執行 git init 指令, 表示已經可以在可攜程式搜尋路徑中執行 portablegit 中的 git.exe, 並要求執行 init, 也就是 initialize 的意思, 將此目錄起始作為 git 倉儲, 執行 git init 之後, git 會在 w1 目錄中建立一個 .git 目錄, 其中帶有 git 所需的設定檔案, 與存放版本資料的資料架構. \n 將 w1 目錄設定為 git 倉儲目錄之後, 就可以在 w1 目錄中儲存檔案, 每次改版或重要改版階段完成之後, 可以再利用 git 指令對改版內容進行: 新增 - 提交 - 推送等流程, 版本新增指令為 git add, 提交為 git commit, 而推送則為 git push \n git add 指令會將改版的資料放入暫存區, 準備進行提交, 而提交過程需要綁定修改者的資訊, 最後推送則需要推送者連通至遠端系統間的認證資訊. 實際操作指令如下: \n git add .\ngit commit -m "提交訊息"\ngit push \n 但由於截至目前, 還沒有註記使用者的帳號與電子郵箱, 也還沒有設定推送的目的地, 因此先在可攜系統中設定使用者帳號: \n git config --global user.name "your github account" \n 接著設定電子郵箱: \n git config --global user.email "your email" \n 上面所執行的 git config 因為額外加入 --global, 因此會將設定內容存入可攜系統的 home_ipv6 目錄中, 設定檔案的名稱為 .gitconfig \n 接下來, 為了要將近端 git 倉儲推向 github.com, 必須先登入 github.com, 然後建立一個完全空白的倉儲, 之後再執行下列指令: \n git branch -M main\ngit remote add origin git@session_name:github_account/w1.git\ngit push -u origin main \n 上列指令的第一行必須在 w1 目錄中執行, 表示要將主分支的名稱設為 main. \n 第二行則針對此倉儲建立一個遠端對應名稱 origin, 其遠端網址為隨後的網址, 若此時要使用 SSH 連線, 且已經設定好電腦登錄資料庫中的 session_name, 且登入 github.com 的帳號名稱為 github_account, 則此遠端倉儲的網址設定為:  git@session_name:github_account/w2.git \n 意思是: 採 SSH 認證時, 必須採 git 作為遠端登入 github.com 的共同帳號, 然後根據隨後的 session_name 找到對應的連線網址 (此時是 github.com), SSH 協定近端的 key 位置, 以及是否需要使用 proxy 設定等資訊. \n \n 執行 git remote add 指令後, 此一資訊會寫入 w1 倉儲中 .git 目錄中的 config 檔案中. 此一指令寫入的資料如下: \n [remote "origin"]\n    url = git@session_name:github_account/w1.git\n    fetch = +refs/heads/*:refs/remotes/origin/* \n 上列指令的最後一行則是用 origin 代表遠端倉儲的網址, 然後將此網址的 main 分支設為之後 git push 指令的內定分支, 也就使用了 git push 指令中的 -u 設定, 此 u 代表 upstream, 也就是設定完成後, git 會將此設定寫入倉儲 .git/config\xa0 檔案中, 將 remote origin 中的 main 分支作為本地分支的上游. \n 換句話說, 執行 git push -u origin main 指令時, Git 會在 w1 倉儲中的 .git/config 檔案中寫入追蹤分支的相關資訊. 也就是會在 .git/config 檔案中的 [branch "main"] 區塊加入 remote 和 merge 設定, 讓近端 w1 倉儲的 main 分支與遠端倉儲 origin 上的 main 分支進行串接. .git/config 檔案中寫入的內容如下: \n [branch "main"]\n    remote = origin\n    merge = refs/heads/main \n SSH 使用設定: \n 在 Windows 操作系統中可以採用 Putty 設定 SSH 協定認證過程中, 登錄至 Github key server 中所需的 OpenSSH 格式鑰匙 (此鑰匙稱為 public key, 也可以將其視為進入 github.com 門上的鎖頭, 因為大家從外面就可以看得到), 另外 Putty 建立 public key 同時, 在近端可以儲存與公鑰認證對應的 private key, 也就是私鑰, 而此私鑰的格式則是 Putty 特有的檔案格式, 因此存為 .ppk, 也就是 putty private key 的意思. \n 通常在帶有還原卡的電腦上工作, 此把私鑰會存在隨身碟中, 並在啟動可攜程式環境之後, 將私鑰相關設定的 session 透過 .reg 檔案存回 Windows 操作系統的登錄檔案中. 而這個 Putty session 的設定登錄檔案將會被存入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 中. 因此設定完成後必須將此登錄檔匯出, 並在下一次啟動可攜程式環境時匯入. 若不是在帶有還原卡的電腦上進行設定, 則只需要設定一次便可使用.', 'tags': '', 'url': 'W1.html'}, {'title': 'Summary', 'text': '\n Edit wcm2025.smm', 'tags': '', 'url': 'Summary.html'}, {'title': 'WCMS', 'text': 'Intro to WCMS: \n Web content management system \n WCM \n wcms.pdf \n', 'tags': '', 'url': 'WCMS.html'}, {'title': 'WebApp', 'text': "網際應用程式 -  Web Application \n A web application (or web app) is application software that is created with web technologies and runs via a web browser. Web applications emerged during the late 1990s and allowed for the server to dynamically build a response to the request, in contrast to static web pages. \n Build Full-Stack Web Apps Using Only Python \n https://en.wikipedia.org/wiki/Solution_stack#Full-stack_developer \xa0 \n https://com-pute.com/brython_tutorial/ \xa0 \n Create production web applications using a browser-based version of Python called 'Brython', as well as the Python Flask and SQLAlchemy libraries. \n https://pythonanvil.com/ \xa0 \n https://streamlitpython.com/ \xa0 \n https://learnsqlpage.com/ \xa0 \n", 'tags': '', 'url': 'WebApp.html'}, {'title': 'Vmware', 'text': 'Vmware  最近宣布 適用於 Windows 及 Linux 的 Vmware Workstation Pro ( 17.6 ), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費. \n 下載 Vmware Workstation Pro  (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe \n 下載 Vmware Fusion Pro  (For Mac) - 註冊帳號後下載 \n', 'tags': '', 'url': 'Vmware.html'}, {'title': 'AI', 'text': '如何因應 AI 時代的挑戰： \n 培養難以被AI取代的核心能力： \n \n 創意思考與問題解決能力 \n 跨領域整合的思維 \n 同理心與情感智商 \n 團隊合作與領導才能 \n 批判性思考與決策能力 \n \n 選擇未來導向的專業領域： \n \n AI 與機器學習相關技術 \n 數據分析與應用 \n 人機互動設計 \n 數位內容創作 \n 永續發展與環保科技 \n 心理諮商與生命教育 \n 創意產業與體驗設計 \n \n 建立終身學習習慣： \n \n 持續關注產業發展趨勢 \n 善用線上學習平台 \n 培養自主學習能力 \n 建立知識更新機制 \n 參與專業社群交流 \n \n 發展多元技能組合： \n \n 不要侷限在單一專業 \n 培養第二專長 \n 跨領域知識整合 \n 軟實力與硬實力並重 \n 培養數位工具運用能力 \n \n 保持開放與彈性思維： \n \n 擁抱新技術與改變 \n 適應力與抗壓性 \n 勇於嘗試新事物 \n 正向面對挑戰 \n 培養創業家精神 \n \n \n \n', 'tags': '', 'url': 'AI.html'}, {'title': 'Topics', 'text': "Github Classeom hw and wcm project 設置: hw 為各學員作業倉儲, wcm 為各組協同倉儲. \n \n Topic1: 可攜環境與 Github \n 可攜環境可以讓參與協同的每一位成員 使用相同版本 的工具套件, 包括 Git, Python, Putty, VSCode, Sharex, wscite 以及 Wink. \n Github 則用來儲存個別學員與協同分組的產品設計內容, 因為倉儲中帶有內容管理系統, 每一位學員在進行各項階段性設計工程時, 都可以 記錄詳細歷程 , 也能利用個人及分組網頁 展示內容 , 其目的除了讓其他學員可以了解各階段提交的進度外, 也能透過互助合作的模式解決所面臨的問題. \n Topic2: WWW 全球資訊網 \n 全球資訊網（World Wide Web，簡稱 WWW）透過網際網路提供文件與各種多媒體資源的存取. 這些文件和資源通過超文本連結（Hypertext Links）互相連接, 並使用超文本傳輸協定（HTTP）進行傳輸. 全球資訊網的出現和普及大舉改變了人類獲取資訊和進行交流的方式, 使得資訊可以在全球範圍內迅速且方便地傳播, 從而促進了知識共享、商業活動及社會進步. 其重要性分別為: \n \n 資訊獲取 ：全球資訊網為現代人提供了方便快捷的資訊獲取方式, 幾乎所有類型的資訊都可以在網上找到. \n 交流與合作 ：全球資訊網促進了全球範圍內的交流與合作, 無論是個人或組織之間, 都可以通過網路進行溝通與協同合作. \n 電子商務 ：全球資訊網是電子商務的基礎, 為企業和消費者提供了一個方便且有效率的交易平台. \n 教育與學習 ：全球資訊網提供了豐富的教育資源與線上學習平台, 使教育得以更加普及和靈活. \n 娛樂與媒體 ：網路為現代人提供了豐富的娛樂內容和媒體資源, 如影片、音樂、互動遊戲等. \n \n Topic3: 作業 - Nginx 與 Reeborg \n Nginx 是一套高效、輕量的開源 HTTP 伺服器, 其事件驅動架構可高效處理大量的並發連接, 因此應用於許多高流量網站. \n Reeborg 則是一套教育工具, 旨在幫助初學者學習程式設計概念和邏輯思維. Reeborg 是一個虛擬的機器人, 學習者可以通過編寫程式來控制它的行動, 完成各種任務和挑戰. Reeborg 支援 Python 和 JavaScript 程式語言, 並提供互動式 Web 界面, 學習者可以直接在瀏覽器中編寫和執行程式. \n https_server_py.7z  (利用 Python 伺服同目錄的 index.html) \n Topic4: 期中專案 - Copilot 與 Reeborg \n Copilot 是由 GitHub 與 OpenAI 合作開發的人工智慧程式碼助手工具. 它利用機器學習技術, 從大量的開源程式碼及自然語言處理模型中學習, 可在開發者編寫程式時提供即時的建議和自動補全功能. Copilot 能夠理解上下文, 並根據開發者的程式風格及需求生成相關的程式片段, 進而提高開發效率, 減少重複性工作, 並幫助解決程式編寫過程中的各種挑戰. Copilot 支援多種程式語言和框架, 是現代軟體開發過程中功能強大的輔助工具. \n Topic5: 期末專案 - Reeborg 與 cmsimde \n cmsimde 網際內容管理系統是一套簡單的網站內容管理系統. 利用 Python 及 Flask 編寫的 cmsimde 其動態網站的內容存在 config/content.htm 檔案中, 編輯時利用 H1, H2 與 H3 標題進行分頁, 一般並不建議各頁面使用重複內容, 動態網站的資料轉為靜態網站內容時, 會透過分頁將各頁內容存在 content 目錄中. 若動態網站中有重複標題的頁面, 則在轉為靜態網站時, 系統會自動在各頁面標題冠上 -1、-2、-3 等尾數進行辨別. \n \n HTML, CSS and Javascript \n ECMAScript 5 教學 \n 2015 Javascript Object Programming  ( local download ) \n 2015 JavaScript Quick Syntax Reference  ( local download ) \n 2015 Pro Javascript Techniques  ( local download ) \n 2016 Beyond JQuery  ( local download ) \n 2023 The Absolute Beginner's Guide to HTML and CSS  ( local download ) \n 2023 Creating Responsive Websites Using HTML5 and CSS3  ( local download )", 'tags': '', 'url': 'Topics.html'}, {'title': 'Topic1', 'text': '可攜環境與 Github \n \n Edit topic1.smm', 'tags': '', 'url': 'Topic1.html'}, {'title': 'Portable', 'text': 'wcm2025 的  start.bat ,  stop.bat , 在 Edge 顯示非 html 的資料時, 將使用系統編碼顯示 (Big-5), 要正確顯示 start.bat 與 stop.bat 中的 UTF-8 中文, 必須在設定中的預設瀏覽器中允許使用 IE 重新載入網頁, 才能將內建編碼改為 UTF-8. \n 以下將說明如何自行在 Windows 操作系統中建立可攜 Python 程式系統. \n gen_portable_python_and_get_pip.7z \n 目前最新的 Python 版本為 3.13.2, 可以利用舊版的 Python310 (為了配合 Siemens NX2312), 以下列程式碼建立一套基本的 Python313 可攜程式套件: \n \n 利用舊版的 Python310 可攜套件執行  gen_3.13.2_portable.py , 就可以建立最基本的 Python 3.13.2 系統目錄, 在此命名為 Python313. \n 接著將此 Python313 目錄放入舊可攜 Python 程式系統的 Y:\\ 之後, 以此目錄名稱取代舊有 start.bat 檔案中的 Python 目錄名稱, 建立一個新的 start_python313.bat, 然後用此批次檔案啟動可攜系統. \n 啟動基本的 Python 3.13.2 可攜套件後, 在命令列中以 python get-pip.py 安裝 pip 工具. \n 為了能夠執行 cmsimde 動態網站, 在命令列執行 pip install flask flask_cors bs4 lxml pelican markdown, 安裝啟動 cmsimde 所需的 Python 模組. \n 至此所得到的 Python313 目錄容量約為 170MB, 壓縮為  Python313.7z.001 ,  Python313.7z.002 ,  Python313.7z.003  與  Python313.7z.004  等四個檔案. \n \n 在此有一點必須特別注意, SciTE 中有關使用 Pythonw.exe 解譯程式設定的檔案必須使用: \n if PLAT_WIN\n\tpython.command=pythonw.exe\nif PLAT_GTK\n\tpython.command=python3\nif PLAT_MAC\n\tpython.command=python \n 也就是使用當下所設定的 pythonw.exe 而非指定到特定舊版本的 pythonw.exe, 例如: Y:\\Python310\\pythonw.exe', 'tags': '', 'url': 'Portable.html'}, {'title': 'Javascript', 'text': '教材一 \n 在任何一個網頁, 利用滑鼠右鍵帶出小視窗, 然後選擇"檢測", 再點選"主控台", 輸入"alert("Hello, Javascript") 後按下 Enter, 就會跳出一個小視窗列出 "Hello, Javascript". 這個意思是, 網頁瀏覽器中就自帶有 Javascript 的解譯器. \n 接下來, 假如你已經建立好了隨身碟中的可攜程式環境:  portable_wcm2025.7z , 同時也取得 wcm2025 課程所配置的學員作業倉儲, 你就可以直接在編輯動態網頁的同時, 開啟該頁面的 Source Code (也就是該頁面的 HTML 超文件內容), 並將下列 Javascript 程式放入超文件中, 存檔後點選編輯區下方的"viewpage"按鈕, 就可以從"主控台"看到程式執行結果: \n <script>\nconsole.log("顯示在主控台 - 紀錄區的內容")\n</script> \n 假如編輯網頁中的 HTML 原始碼再加入下列程式段, 就可以在網頁中利用 <script type="text/python"></script>, 以 Python 語法建立程式, 而這種程式是經由採 Javascript 編寫的  Brython  解譯器轉為 Javascript 後, 直接在網頁中執行: \n <!-- 導入 brython 程式庫 -->\n<p>\n<script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n</p>\n<!-- 啟動 Brython -->\n<p>\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script>\n<script type="text/python">\nprint("從 Brython 執行後看到的結果")\n</script> \n 從上面這個範例, 可以看出較長的 Javascript 程式, 並不是直接寫在網頁上, 而是儲存在 WWW 伺服器中的特定位置後, 然後在網頁中導入執行, 例如這個範例中的 brython.js. \n 另外, 由於 cmsimde 網際內容管理系統程式設計的問題, 動態網頁與靜態網頁引用 Javascript 程式路徑的方式不同, 初學者必須特別注意. 下列程式就是利用 Brython 編寫的網頁版貪食蛇遊戲, 利用滑鼠按下"啟動"就可以執行, 按下"暫停"程式就會暫時停止執行. \n \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n', 'tags': '', 'url': 'Javascript.html'}, {'title': 'Topic2', 'text': 'WWW 全球資訊網 \n \n Edit topic2.smm', 'tags': '', 'url': 'Topic2.html'}, {'title': 'Topic3', 'text': 'Homework \n \n Edit topic3.smm', 'tags': '', 'url': 'Topic3.html'}, {'title': 'VM', 'text': 'Virtual Machine and WWW servers: \n 1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容. \n 作業一 (20%): 採用  nginx  建立全球資訊網伺服器 \n 在 Windows 操作系統中建立一台 WWW 伺服器 \n 在 Ubuntu 操作系統建立一台 WWW 伺服器 \n 在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu) \n Virtualbox \n Vmware  最近宣布 適用於 Windows 及 Linux 的 Vmware Workstation Pro ( 17.6 ), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費. \n 下載 Vmware Workstation Pro  (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe \n 下載 Vmware Fusion Pro  (For Mac) - 註冊帳號後下載 \n 作業二 (20%): 在各種不同環境下的操作系統中配置  https://mde.tw/reeborg  ( 原始碼 )', 'tags': '', 'url': 'VM.html'}, {'title': 'Topic4', 'text': '期中專案 \n \n Edit topic4.smm', 'tags': '', 'url': 'Topic4.html'}, {'title': 'Copilot', 'text': '2. 期中協同專案執行、簡報與報告 (三人一組) (30%) \n 專案題目: 利用 Copilot 解析\xa0 https://mde.tw/reeborg  ( 原始碼 )', 'tags': '', 'url': 'Copilot.html'}, {'title': 'Topic5', 'text': '期末專案 \n \n Edit topic5.smm', 'tags': '', 'url': 'Topic5.html'}, {'title': 'cmsimde', 'text': '3. 期末協同專案執行、簡報與報告\xa0(三人一組) (30%) \n 專案題目: 網際內容管理架構下的  https://mde.tw/reeborg  ( 原始碼 ) \n 利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯 \n 設法將\xa0 https://mde.tw/reeborg  ( 原始碼 )  與 cmsimde 網際內容管理系統整合', 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Reeborg', 'text': "建立開發用的 Reeborg 倉儲: \n 因為  https://github.com/aroberge/reeborg  原始碼的使用授權允許延伸應用, 因此進行如下處理: \n \n 在 Github 建立一個空的倉儲, 名稱設為 reeborg. \n git clone --recurse-submodules  https://github.com/aroberge/reeborg.git  rb, 表示暫時將可能帶有子模組 (其實並沒有) 的倉儲取下, 放入 rb 目錄中. \n cd rb 後, 執行 git remote add rb  git@your_putty_session:your_github_account/reeborg.git \n 然後利用 git push rb, 將帶有所有提交歷程記錄的倉儲送到原本為空的 reeborg. \n 此一 Reeborg 原始碼的倉儲就位於  https://github.com/mdecycu/reeborg \n 取下新建立的 reeborg 開發倉儲後, 將 reeborg.js 放入 rb 目錄, 並取原先的 reeborg_offline.html 作為 index.html, 放入 acp 與 acp.bat 後將內建 branch 改為 main, 提交變更後再設定 Github Pages, 完成  https://mde.tw/reeborg  的開發設定. \n 除了目前多語言版本外, 也可以 回到 2016.02.03 的穩定版本 . \n \n 利用 Python 內建伺服器執行 Reeborg: \n \n 啟動可攜程式環境 \n cd tmp \n git clone  https://github.com/mdecycu/reeborg.git \n cd reeborg \n python -m http.server \n 然後使用瀏覽器連結至  http://localhost:8000/world.html \n \n Reeborg 原始碼所使用的 Javascript 語法請參考下列參考資料: \n ECMAScript 5 教學 \n 2015 Javascript Object Programming  ( local download ) \n 2015 JavaScript Quick Syntax Reference  ( local download ) \n 2015 Pro Javascript Techniques  ( local download ) \n 2016 Beyond JQuery  ( local download ) \n 2023 The Absolute Beginner's Guide to HTML and CSS  ( local download ) \n 2023 Creating Responsive Websites Using HTML5 and CSS3  ( local download ) \n", 'tags': '', 'url': 'Reeborg.html'}, {'title': 'walk', 'text': 'https://s104.cycu.org/reeborg  在 Other worlds 下方點選 Alone 後, 按下 run 執行下列程式: \n for i in range(4):\n    for j in range(9):\n        move()\n    turn_left() \n', 'tags': '', 'url': 'walk.html'}, {'title': 'Reference', 'text': 'https://github.com/mdecycu/cmsimde  利用 Template 建立多樣的靜態網站內容 \n https://github.com/mdecycu/reeborg  原始碼研究, 升級其 Brython 版本以及相關 Javascript 程式庫 \n https://mde.tw/reeborg/ \n 整理舊資料:  https://github.com/coursemdetw \n https://coursemdetw.github.io/creo2primer  learn how to write a CAD tutorial book \n', 'tags': '', 'url': 'Reference.html'}, {'title': 'Old', 'text': '以下連結僅能在系統主幹網路的 IPv6 協定下擷取: \n 有關 代理主機設定 \n 有關 全球協同 \n 有關  Blogger ,  Blogger API ,  應用 \n 有關  ANSIＣ , 有關  Lua  (CoppeliaSim 中使用 Lua 作為控制用 Script 語言) \n 有關  Konva \n 其他  ( 2019 ,  2020 ,  2021 ,  2022 ,  2023 ,  2024 ) \n \n \n', 'tags': '', 'url': 'Old.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n', 'tags': '', 'url': 'Brython.html'}]};