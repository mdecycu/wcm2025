var tipuesearch = {"pages": [{'title': 'About', 'text': '倉儲:  https://github.com/mdecycu/wcm2025 \n 網頁:  https://mde.tw/wcm2025 \n Discussions:  https://github.com/mdecycu/wcm2025/discussions \n 課程目標: \n 讓學員透過程式設計了解網際內容管理與機械設計間的關係與應用 \n 教學要點: \n Python 程式設計、網際內容管理系統開發與應用 \n 授課內容: \n 網際內容管理概要 \n cmsimde 架構 \n 網際內容管理與機械設計 \n 分組專案 \n 分組報告 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 87b7bbx \n 課程評分: \n 出席並參與討論 (30%) \n 期中協同專案執行、簡報與報告 (三人一組) (30%) \n 修改並配置\xa0 Reeborg\'s world \xa0( 原始碼 ) \n 期末協同專案執行、簡報與報告\xa0(三人一組) (40%) \n CoppeliaSim 與 Webots 虛實整合六方投籃機系統 - Web 端程式建置 \n 配置一台可以讓至多六名使用者參與的 Web 投籃機線上遊戲 \n CoppeliaSim 場景 https 伺服器配置 \n 各客戶端與伺服器間的認證系統配置 \n \n 行事曆 \n  全頁檢視  \n', 'tags': '', 'url': 'About.html'}, {'title': 'WCMS', 'text': 'Intro to WCMS: \n Web content management system \n WCM \n wcms.pdf', 'tags': '', 'url': 'WCMS.html'}, {'title': 'Summary', 'text': '\n Edit wcm2025.smm', 'tags': '', 'url': 'Summary.html'}, {'title': 'WebApp', 'text': "網際應用程式 -  Web Application \n A web application (or web app) is application software that is created with web technologies and runs via a web browser. Web applications emerged during the late 1990s and allowed for the server to dynamically build a response to the request, in contrast to static web pages. \n Build Full-Stack Web Apps Using Only Python \n https://en.wikipedia.org/wiki/Solution_stack#Full-stack_developer \xa0 \n https://com-pute.com/brython_tutorial/ \xa0 \n Create production web applications using a browser-based version of Python called 'Brython', as well as the Python Flask and SQLAlchemy libraries. \n https://pythonanvil.com/ \xa0 \n https://streamlitpython.com/ \xa0 \n https://learnsqlpage.com/ \xa0 \n 前端程式將以  https://mde.tw/reeborg  為例. \n 內容管理系統將以  https://mde.tw/reeborg/docs  為例. \n 與 Server 端結合的網際內容管理將採  Flask ,  CoppeliaSim  與  Webots , 3D 零組件將使用  Solvespace  與  Siemens NX2312  繪製. \n 課程摘要流程圖:  https://mde.tw/mind-map \n", 'tags': '', 'url': 'WebApp.html'}, {'title': 'Topics', 'text': '專案練習一: \n Docker  and  Discourse \n 請在一台 Windows 電腦上, 利用  Docker  配置並部署  Discourse \n Windows Docker DOC \n 專案練習二: \n Fossil SCM  and  CMSIMDE \n 請在一台 Windows 電腦上, 利用  Fossil SCM  配置能讓多人連線使用的網際內容管理系統(e.g.\xa0 CMSIMDE ) \n 專案練習三: \n Solvespace and CoppeliaSim (Webots) \n 請在一台 Windows 電腦上, 利用機電模擬系統, 建置一套能夠多人同時參與的投籃遊戲系統', 'tags': '', 'url': 'Topics.html'}, {'title': 'Control', 'text': 'https://wokwi.com/ \n https://docs.wokwi.com/ \xa0 \n Wokwi, Arduino and Push Button \n Wokwi, Arduino and Potentiometer \n Wokwi, Arduino, Serial and Python \n \n ESP32 Web server \n https://github.com/wokwi/wokwigw/releases \xa0 \n https://docs.wokwi.com/guides/esp32-wifi#the-private-gateway \xa0 \n https://lcgamboa.github.io/picsimlab_docs/stable/OnlineSimulator.html \xa0 \n https://github.com/lcgamboa/picsimlab \xa0 \n HoRoSim, a Holistic Robot Simulator: Arduino Code, Electronic Circuits and Physics \xa0(2021) \n https://github.com/scrum-1/horosim \xa0', 'tags': '', 'url': 'Control.html'}, {'title': 'Ref', 'text': 'https://github.com/mdecycu/cmsimde  利用 Template 建立多樣的靜態網站內容 \n https://github.com/mdecycu/reeborg  原始碼研究, 升級其 Brython 版本以及相關 Javascript 程式庫 \n https://mde.tw/reeborg/ \n https://github.com/mdecycu/3dprinter  ( 參考 ) - 3D 列印設計與模擬 Cyber-Physical 3D Printer \n https://mde.tw/3dprinter \n 整理舊資料:  https://github.com/coursemdetw \n https://coursemdetw.github.io/creo2primer  learn how to write a CAD tutorial book \n \n', 'tags': '', 'url': 'Ref.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};